# Django HTTP
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.http import JsonResponse
from django.core.serializers.json import DjangoJSONEncoder
import json
import datetime        

# Django Login
from django.contrib.auth import login, authenticate
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import AuthenticationForm

# Django Registration
from django.contrib.auth.forms import UserCreationForm
from django.template.loader import get_template
from django.template import Context
from django.contrib.auth.models import User
from .forms import UserForm, CustomerForm, OrderForm, LoginForm

# Django geolocation
from django_ip_geolocation.decorators import with_ip_geolocation

# Misc
from .models import *
from cart.cart import Cart
from django.views.decorators.csrf import csrf_exempt


# Create your views here.

def store(request):
    if request.user.is_authenticated:
        u = request.user
        customer = Customer.objects.get(user_id=u.id)
        
        # Get the user's location
        customer.latitude = location.geo["latitude"]
        customer.longitude = location.geo["longitude"]

        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        items = order.orderitem_set.all()
        cartItems = order.get_cart_items
    else:
        cartItems = 0

    products = Product.objects.all()
    context = {'products':products, 'cartItems':cartItems}

    return render(request, 'ecommerce/store.html', context)


def cart(request):
    if request.user.is_authenticated:
        u = request.user
        customer = Customer.objects.get(user_id=u.id)
        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        items = order.orderitem_set.all()
        cartItems = order.get_cart_items
    
        context = {'items':items, 'order':order, 'cartItems':cartItems}
        return render(request, 'ecommerce/cart.html', context)
    else:
        return redirect('login')


@csrf_exempt
def checkout(request):
    
    if request.user.is_authenticated:
        u = request.user
        customer = Customer.objects.get(user_id=u.id)
        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        items = order.orderitem_set.all()
        cartItems = order.get_cart_items
        cart = Cart(request)
        total = sum([float(value['price']) for key,value in cart.cart.items()])

        context = {'items':items, 'order':order, 'cartItems':cartItems, 'total':total}
        return render(request, 'ecommerce/checkout.html', context)
    else:
        return redirect('login')

def updateItem(request):
    
    if request.user.is_authenticated:
        data=json.loads(request.body)
        productId = data['productId']
        action = data['action']
        print('Action:', action)
        print('Product:', productId)

        u = request.user
        customer = Customer.objects.get(user_id=u.id)

        product = Product.objects.get(id=productId)

        order, created = Order.objects.get_or_create(customer=customer, complete=False)

        orderItem, created = OrderItem.objects.get_or_create(order=order, product=product)

        if action == 'add':
            orderItem.quantity = (orderItem.quantity + 1)
        elif action == 'remove':
            orderItem.quantity = (orderItem.quantity - 1)

        orderItem.save()

        if orderItem.quantity <= 0:
            orderItem.delete()

        return JsonResponse('Item updated', safe=False)
    else:
        return redirect('login')
    
@csrf_exempt
def processOrder(request):
    
    if request.user.is_authenticated:
        transaction_id = datetime.datetime.now().timestamp()
        data = json.loads(request.body)

        u = request.user
        customer = Customer.objects.get(user_id=u.id)
        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        total = float(data['form']['total'])
        order.transaction_id = transaction_id

        if total == order.get_cart_total:
            order.complete = True
            order.save()

        if order.shipping == True:
            ShippingAddress.objects.create(
                customer=customer,
                order=order,
                address=data['shipping']['address'],
                city=data['shipping']['city'],
                state=data['shipping']['state'],
                zipcode=data['shipping']['zipcode'],
            )


        return JsonResponse('Payment Complete', safe=False)
    else:
        return redirect('login')

def signup(request):

    if request.method == 'POST':
        user_form = UserForm(request.POST)
        customer_form = CustomerForm(request.POST)

        if user_form.is_valid() and customer_form.is_valid():
            user = user_form.save()
            customer_form = CustomerForm(request.POST, user.customer)
            customer_form.save()
            messages.success(request, f'Your account has been created! You are now able to login')
            return redirect('login')
        else:
            messages.error(request, f'Please correct the error below')
    else:
        user_form = UserForm()
        customer_form = CustomerForm()

    context = {'user_form' : user_form, 'customer_form': customer_form}
    return render(request, 'ecommerce/signup.html', context)

def Login(request):

    if request.user.is_authenticated:
        return redirect('store')
    else:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            
            username = login_form.fields['username']
            password = login_form.fields['password']

            #username = request.POST.get('username')
            #password =request.POST.get('password')

            user = authenticate(request, user=username, password=password)

            if user is not None:
                login(request, user)
                messages.success(request, f'Welcome {username}!!');
                return redirect('store')
            else:
                for field in login_form.fields:
                    login_form[field].field.widget.attrs['class'] += ' error'

                messages.info(request, 'Username OR password is incorrect')

        login_form = LoginForm();
        context = {'form' : login_form}
        return render(request, 'ecommerce/login.html', context)
